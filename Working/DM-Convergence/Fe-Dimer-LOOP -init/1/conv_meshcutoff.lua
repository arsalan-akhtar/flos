--[[
Example on how to converge the Mesh.Cutoff variable
in SIESTA.

This example can take any system and will
perform a series of calculations with increasing
Mesh.Cutoff.
Finally it will write-out a table file to be plotted
which contains the Mesh.Cutoff vs. 

 - MeshCutoff

This example may be controlled via 3 values:

 1. cutoff_start
 2. cutoff_end
 3. cutoff_step

where then this script will automatically create 
an array of those values and iterate them.
Note the values here are in Ry.

--]]
local label = "fe2DFM"
local cutoff_start = 150.
local cutoff_end = 650.
local cutoff_step = 50.
-- Load the FLOS module
local flos = require "flos"
-- Create array of cut-offs
local cutoff = flos.Array.range(cutoff_start, cutoff_end, cutoff_step)
local Etot = flos.Array.zeros(#cutoff)
--=====================================================================
local is_converged
local   scf_count=0
local init_MW
--local cutoff_mixing_start=0.1
--local mixing = flos.Array.range(cutoff_start, cutoff_end, cutoff_step)
-- Initial cut-off element
local icutoff = 1
function siesta_comm() 
   -- Do the actual communication with SIESTA
   if siesta.state == siesta.INITIALIZE then
      -- In the initialization step we request the
      -- Mesh cutoff (merely to be able to set it
      siesta.receive({"Mesh.Cutoff.Minimum",
                      "SCF.MaxIterations",
--                      "SCF.MixHamiltonian", Boolean
--                      "SCF.MixCharge",
--                      "SCF.NumberPulay",
                      "SCF.MixingWeight",
                      "SCF.DM.Tolerance",
                      "ElectronicTemperature",
                      "SCF.Mixer.Weight",
                      "SCF.NumberPulay",
                      "SCF.NumberKick",
                      "SCF.DM.Converge"
                                              })

      -- Overwrite to ensure we start from the beginning
      siesta.Mesh.Cutoff.Minimum = cutoff[icutoff]
      init_MW=siesta.SCF.Mixer.Weight
--      siesta.SCF.MixingWeight=mixing[icutoff]
      IOprint( ("=============================================================================="))
      IOprint( ("------------------------------------------------------------------------------"))
      IOprint( ("              This Part Generated By LUA for INITALIZE Stage                          "))
      IOprint( ("------------------------------------------------------------------------------"))
      IOprint( ("LUA: The Starting Mesh-cutoff is   : %8.3f Ry"):format(cutoff[icutoff]) )
      IOprint( ("LUA: The Max Iterations is         : %3d "):format(siesta.SCF.MaxIterations) )
--      IOprint( ("\nLUA: The Hamiltonian Mixing is   : %8.3f Ry\n"):format(siesta.SCF.MixHamiltonian) )
--      IOprint( ("\nLUA: The Charge Mixing is        : %8.3f Ry\n"):format(siesta.SCF.MixCharge) )
      IOprint( ("LUA: The Mixing Weight is          : %8.6f Ry"):format(siesta.SCF.MixingWeight) )
      IOprint( ("LUA: The DM Tolerance is           : %8.6f Ry"):format(siesta.SCF.DM.Tolerance) )
--      IOprint( ("\nLUA: The HM Tolerance is         : %8.3f Ry\n"):format(siesta.SCF.HM.Tolerance) )
      IOprint( ("LUA: The Electronic Temperature is : %8.3f Ry"):format(siesta.ElectronicTemperature) )
      IOprint( ("LUA: The Mixer Weight is           : %8.3f Ry"):format(siesta.SCF.Mixer.Weight) )
      IOprint( ("LUA: The Number of Pulay is        : %3d "):format(siesta.SCF.NumberPulay) )
      IOprint( ("LUA: The Number of Kick is         : %3d "):format(siesta.SCF.NumberKick) )
--      IOprint( ("LUA: The DM Used Converge is         : %3s "):format(siesta.SCF.DM.Converge) )
      IOprint( ("==============================================================================\n"))
      siesta.send({"Mesh.Cutoff.Minimum"})
   end


   if siesta.state == siesta.INIT_MD then
      siesta.receive({"Mesh.Cutoff.Used"})
      -- Store the used meshcutoff for this iteration
      cutoff[icutoff] = siesta.Mesh.Cutoff.Used
   end

   if siesta.state==siesta.SCF_LOOP then
      IOprint(("LUA: scf count        : %3d "):format(scf_count))
      siesta.receive({"SCF.dD",
                      "SCF.SCFconverged",
                      "SCF.NumberPulay",
                      "SCF.MaxIterations",
                      "SCF.MixingWeight",
                      "SCF.Mixer.Weight",
                      "SCF.NumberKick",                  
                     })
--      IOprint( ("LUA: The Number of Kick is         : %3s "):format(siesta.SCF.DM.Converge) )
--      IOprint((siesta.SCF.dD))
--      IOprint((siesta.SCF.SCFconverged))
      if siesta.SCF.dD > 2.0 then
          siesta.SCF.NumberPulay=45
          siesta.SCF.Mixer.Weight=0.1
          siesta.SCF.MixingWeight=0.1
--      elseif siesta.SCF.dD <= 2.0 and siesta.SCF.dD > 1.5 then
--          siesta.SCF.NumberPulay=30
--          siesta.SCF.Mixer.Weight=0.01
--      elseif siesta.SCF.dD <= 2.0 and siesta.SCF.dD > 1.0 then
--          siesta.SCF.NumberPulay=35
--          siesta.SCF.Mixer.Weight=0.25
      elseif siesta.SCF.dD <= 2.0 and siesta.SCF.dD > 0.1 then
          siesta.SCF.NumberPulay=45
          siesta.SCF.Mixer.Weight=0.15
          siesta.SCF.MixingWeight=0.15
--          siesta.SCF.Mixer.Weight=0.25
      elseif siesta.SCF.dD <= 0.1 then
          siesta.SCF.NumberPulay=45
          siesta.SCF.Mixer.Weight=0.25
          siesta.SCF.MixingWeight=0.25
      end
      is_converged=siesta.SCFconverged
      siesta.send({"SCF.SCFconverged",
                    "SCF.dD",
                    "SCF.NumberPulay",
                    "SCF.MaxIterations",
                    "SCF.MixingWeight",
                    "SCF.Mixer.Weight",
                    "SCF.NumberKick",                          
                  })
      IOprint(("LUA: The Number of Pulay is        : %3d "):format(siesta.SCF.NumberPulay))
      IOprint(("LUA: The Number of Kick is         : %3d "):format(siesta.SCF.NumberKick))
      IOprint(("LUA: The Mixer Weight is           : %8.3f Ry"):format(siesta.SCF.Mixer.Weight))
      IOprint(("LUA: The Mixing Weight is          : %8.6f Ry"):format(siesta.SCF.MixingWeight))
      scf_count=scf_count+1
   end

   if siesta.state == siesta.MOVE then
      siesta.receive({"MD.Relaxed",
--                      "SCF.SCFconverged",
                     })

      IOprint( ("=============================================================================="))
      IOprint( ("------------------------------------------------------------------------------"))
      IOprint( ("              This Part Generated By LUA for MOVE Stage                          "))
      IOprint( ("------------------------------------------------------------------------------"))
      IOprint( ("Is It Converged Last Time          : %s"):format(siesta.SCF.SCFconverged))
      IOprint( ("Last Time dDmax was                : %8.6f"):format(siesta.SCF.dD))
      IOprint( ("LUA: The Starting Mesh-cutoff is   : %8.3f Ry"):format(cutoff[icutoff]))
      IOprint( ("LUA: The Max Iterations is         : %3d "):format(siesta.SCF.MaxIterations))
--      IOprint( ("\nLUA: The Hamiltonian Mixing is   : %8.3f Ry\n"):format(siesta.SCF.MixHamiltonian) )
--      IOprint( ("\nLUA: The Charge Mixing is        : %8.3f Ry\n"):format(siesta.SCF.MixCharge) )
      IOprint( ("LUA: The Mixing Weight is          : %8.6f Ry"):format(siesta.SCF.MixingWeight) )
      IOprint( ("LUA: The DM Tolerance is           : %8.6f Ry"):format(siesta.SCF.DM.Tolerance) )
--      IOprint( ("\nLUA: The HM Tolerance is         : %8.3f Ry\n"):format(siesta.SCF.HM.Tolerance) )
      IOprint( ("LUA: The Electronic Temperature is : %8.3f Ry"):format(siesta.ElectronicTemperature) )
      IOprint( ("LUA: The Mixer Weight is           : %8.3f Ry"):format(siesta.SCF.Mixer.Weight))
      IOprint( ("LUA: The Number of Pulay is        : %3d "):format(siesta.SCF.NumberPulay))
      IOprint( ("LUA: The Number of Kick is         : %3d "):format(siesta.SCF.NumberKick))
--      IOprint( ("LUA: The DM Used Converge is         : %3s "):format(siesta.SCF.DM.Converge))
      IOprint( ("==============================================================================\n"))


      is_converged=siesta.SCF.SCFconverged
      IOprint(is_converged)    
      if is_converged then
         siesta.MD.Relaxed = true
--         IOprint(" if true is here")
      else 
--           siesta.SCF.Mixer.Weight=siesta.SCF.Mixer.Weight-0.1
           parmeters_mixer()
--           IOprint(siesta.SCF.Mixer.Weight)
--           IOprint(" if false is here")
      end             
      siesta.send({"Mesh.Cutoff.Minimum", 
                   "MD.Relaxed",
                   "SCF.MaxIterations",
                   "SCF.MixingWeight",
                   "SCF.Mixer.Weight",
                   "SCF.NumberPulay",
                   "SCF.NumberKick",
                                  })
   end

--      IOprint(siesta.MD.Relaxed)     
--      if siesta.MD.relaxed then    
   --end
--[[   if siesta.state == siesta.MOVE then
      -- Retrieve the total energy and update the
      -- meshcutoff for the next cycle
      -- Notice, we do not move, or change the geometry
      -- or cell-vectors.
      siesta.receive({"E.total",
		      "MD.Relaxed"})

      Etot[icutoff] = siesta.E.total
      IOprint( ("\nLUA: starting mesh-cutoff: %8.3f Ry\n"):format(cutoff[icutoff]) )
      IOprint( ("\nLUA: Mixing : %8.3f Ry\n"):format(siesta.SCF.MixingWeight) )
      -- Step the meshcutoff for the next iteration
      if step_cutoff(cutoff[icutoff]) then
	 siesta.Mesh.Cutoff.Minimum = cutoff[icutoff]
      else
	 siesta.MD.Relaxed = true
      end
      
      siesta.send({"Mesh.Cutoff.Minimum", "MD.Relaxed"})

   end
--]]

--[[   if siesta.state == siesta.ANALYSIS then
3      local file = io.open("meshcutoff_E.dat", "w")

      file:write("# Mesh-cutoff vs. energy\n")

      -- We write out a table with mesh-cutoff, the difference between
      -- the last iteration, and the actual value
      file:write( ("%8.3e  %17.10e  %17.10e\n"):format(cutoff[1], 0., Etot[1]) )
      for i = 2, #cutoff do
	 file:write( ("%8.3e  %17.10e  %17.10e\n"):format(cutoff[i], Etot[i]-Etot[i-1], Etot[i]) )
      end

      file:close()

   end
--]]
end
--===========================================
-- Step the cutoff counter and return
-- true if successfull (i.e. if there are
-- any more to check left).
-- This function will also step past values 
function step_cutoff(cur_cutoff)

   if icutoff < #cutoff then
      icutoff = icutoff + 1
   else
      return false
   end

   if cutoff[icutoff] <= cur_cutoff then
      cutoff[icutoff] = cutoff[icutoff-1]
      Etot[icutoff] = Etot[icutoff-1]
      return step_cutoff(cur_cutoff)
   end

   return true
end
--===========================================
function  parmeters_mixer() 
    if siesta.SCF.dD > 20.0 and siesta.SCF.dD >= 0.1 then
       local DM = label .. ".DM"
       os.execute("rm " .. DM)
       IOprint(("LUA: Removing DM "))
       siesta.SCF.MaxIterations=50
       siesta.SCF.Mixer.Weight=0.1
--       siesta.SCF.NumberPulay=25
       siesta.SCF.NumberKick=25
       IOprint(("LUA: The Max Iterations Changed to : %3d "):format(siesta.SCF.MaxIterations))
       IOprint(("LUA: The Mixer Weight Changed to    : %8.3f Ry"):format(siesta.SCF.Mixer.Weight))
       IOprint(("LUA: The Number of Pulay Changed to : %3d "):format(siesta.SCF.NumberPulay))
       IOprint(("LUA: The Number of Kick Changed to  : %3d "):format(siesta.SCF.NumberKick))
       return siesta.SCF.MaxIterations,siesta.SCF.Mixer.Weight,siesta.SCF.NumberPulay,siesta.SCF.NumberKick
    else
--       local DM = label .. ".DM"
--       os.execute("rm " .. DM)
--       IOprint(("LUA: Removing DM "))
       siesta.SCF.MaxIterations=50
       siesta.SCF.Mixer.Weight=0.1
--       siesta.SCF.NumberPulay=35
       siesta.SCF.NumberKick=25
       IOprint(("LUA: The Max Iterations Changed to : %3d "):format(siesta.SCF.MaxIterations))
       IOprint(("LUA: The Mixer Weight Changed to    : %8.3f Ry"):format(siesta.SCF.Mixer.Weight))
       IOprint(("LUA: The Number of Pulay Changed to : %3d "):format(siesta.SCF.NumberPulay))
       IOprint(("LUA: The Number of Kick Changed to  : %3d "):format(siesta.SCF.NumberKick))
       return siesta.SCF.MaxIterations,siesta.SCF.Mixer.Weight,siesta.SCF.NumberPulay,siesta.SCF.NumberKick
    end   
end



function siesta_update_DM(old, current)

   if not siesta.IONode then
      -- only allow the IOnode to perform stuff...
      return
   end
   -- Move about files so that we re-use old DM files

   local old_DM = DM .. "." .. tostring(old)
   local current_DM = DM .. "." .. tostring(current)
   local initial_DM = DM .. ".0"
   local final_DM = DM .. ".".. tostring(NEB.n_images+1) 
   print ("The Label of Old DM is : " .. old_DM)
   print ("The Label of Current DM is : " .. current_DM)
   -- Saving initial DM
   if old==0 and current==0 then
     print("Removing DM for Resuming")
     IOprint("Deleting " .. DM .. " for a clean restart...")
     os.execute("rm " .. DM)
   end 
  
   if 0 <= old and old <= NEB.n_images+1 and NEB:file_exists(DM) then
      -- store the current DM for restart purposes
      IOprint("Saving " .. DM .. " to " .. old_DM)
      os.execute("mv " .. DM .. " " .. old_DM)
   elseif NEB:file_exists(DM) then
      IOprint("Deleting " .. DM .. " for a clean restart...")
      os.execute("rm " .. DM)
   end

   if NEB:file_exists(current_DM) then
      IOprint("Deleting " .. DM .. " for a clean restart...")
      os.execute("rm " .. DM)
      IOprint("Restoring " .. current_DM .. " to " .. DM)
      os.execute("cp " .. current_DM .. " " .. DM)
   end        
end
   

--[[
      if siesta.SCF.dD > 2.0 then
          siesta.SCF.NumberPulay=25
--          siesta.SCF.Mixer.Weight=0.01
--      elseif siesta.SCF.dD <= 2.0 and siesta.SCF.dD > 1.5 then
--          siesta.SCF.NumberPulay=30
--          siesta.SCF.Mixer.Weight=0.01
      elseif siesta.SCF.dD <= 2.0 and siesta.SCF.dD > 1.0 then
          siesta.SCF.NumberPulay=35
--          siesta.SCF.Mixer.Weight=0.25
      elseif siesta.SCF.dD <= 1.0 and siesta.SCF.dD > 0.1 then
          siesta.SCF.NumberPulay=40
--          siesta.SCF.Mixer.Weight=0.25
      elseif siesta.SCF.dD <= 0.1 then
          siesta.SCF.NumberPulay=45
--          siesta.SCF.Mixer.Weight=0.5
      end


====================================
      if siesta.SCF.dD > 2.0 then
          siesta.SCF.NumberPulay=25
          siesta.SCF.Mixer.Weight=0.5
          siesta.SCF.MixingWeight=0.1
--      elseif siesta.SCF.dD <= 2.0 and siesta.SCF.dD > 1.5 then
--          siesta.SCF.NumberPulay=30
--          siesta.SCF.Mixer.Weight=0.01
--      elseif siesta.SCF.dD <= 2.0 and siesta.SCF.dD > 1.0 then
--          siesta.SCF.NumberPulay=35
--          siesta.SCF.Mixer.Weight=0.25
      elseif siesta.SCF.dD <= 2.0 and siesta.SCF.dD > 0.1 then
          siesta.SCF.NumberPulay=40
          siesta.SCF.MixingWeight=0.1
--          siesta.SCF.Mixer.Weight=0.25
      elseif siesta.SCF.dD <= 0.1 then
          siesta.SCF.NumberPulay=45
--          siesta.SCF.Mixer.Weight=0.5
          siesta.SCF.MixingWeight=0.1
      end


--]]
